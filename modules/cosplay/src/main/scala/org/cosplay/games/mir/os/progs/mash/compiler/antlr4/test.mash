native def listOf(fromIncl, toExcl)

let x = null
let x = true

let WIDTH = 100
let HEIGHT = 100

let list0 = (1, 2, 3, true, null)
let list1 = () // Empty list.

let map = ~($HEIGHT -> 2 * 0.4, "name"->"cosplay" + ' ' + "engine")

println($map["name"]["key"])

let s = !#("cat /home/file.txt | wc | take 1")

println("Number of command line arguments is $#")
println("Last exit status is $?")
println("Current PID $$")
println("Last background PID $!")

someapp()

alias ll = !!("ls -la -F")

/*
 * Test function.
 *
 * @param a 1st parameter.
 */
def fun(a, b, c) = {
    def z() = println()
    let q = (1.054 + 2_00_00) * $4 + $(letName)[2]
    while $q <= work() do println("something")
    let newList = for i <- list() yield $i + "str"
    $newList = (1, 2, 3)
    let anotherList = (1, "true", true, null, ("sub", "list"), $(newList)[1])
    println("nikita") // Direct function call.
    $(newList)[$q]("some", 1, "arg") // FP-style function call.
    if boolFunc() && $w then doSome()
    if boolVal() then {
        def z() = println()
        println(z())
    }
    else
        println("Else")
    if !boolVal() then null else null

    fun1((p, b) => println($p))
}

def fun1(f, param) = {
    // Comment.
    $f($param)
}
